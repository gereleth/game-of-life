{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/game_logic.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value' || descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j];\n                if (attributes[attribute.name]) {\n                    j++;\n                }\n                else {\n                    node.removeAttribute(attribute.name);\n                }\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    if (value != null || input.value) {\n        input.value = value;\n    }\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    let unsubscribe;\n    if (is_crossorigin()) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        detach(iframe);\n        if (unsubscribe)\n            unsubscribe();\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(html, anchor = null) {\n        this.e = element('div');\n        this.a = anchor;\n        this.u(html);\n    }\n    m(target, anchor = null) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(target, this.n[i], anchor);\n        }\n        this.t = target;\n    }\n    u(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    p(html) {\n        this.d();\n        this.u(html);\n        this.m(this.t, this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next, lookup.has(block.key));\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if ($$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.21.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","function Game() {\n    let self = this\n    self.livingSet = new Set();\n    self.numNeighbors = new Map();\n\n    const neighborhood = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];\n\n    this.stringify = function(cell) {\n        return cell.r + ';' + cell.c\n    }\n    this.parse = function(cellString) {\n        const [r, c] = cellString.split(';')\n        return {r:parseInt(r, 10), c:parseInt(c, 10)}\n    }\n    // check if a particular cell is alive\n    this.isCellAlive = function(cell) {\n        return self.livingSet.has(this.stringify(cell));\n    }\n\n    // clear the grid\n    this.clear = function () {\n        self.livingSet = new Set();\n        self.numNeighbors = new Map();\n    }\n\n    // update game grid\n    this.update = function(births, deaths) {\n        let dr, dc, nr, nc, n, ncell, deleted;\n        for (let cell of births) {\n            ncell = this.stringify(cell)\n            if (self.livingSet.has(ncell)) continue;\n            self.livingSet.add(ncell)\n            if (!(self.numNeighbors.has(ncell))) {\n                self.numNeighbors.set(ncell, 0)\n            }\n            for ([dr, dc] of neighborhood) {\n                nr = cell.r+dr;\n                nc = cell.c+dc;\n                ncell = this.stringify({r:nr, c:nc})\n                if (!self.numNeighbors.has(ncell)) {\n                    self.numNeighbors.set(ncell, 1)\n                } else {\n                    self.numNeighbors.set(ncell, self.numNeighbors.get(ncell)+1)\n                }\n            }\n        }\n        for (let cell of deaths) {\n            deleted = self.livingSet.delete(this.stringify(cell))\n            if (deleted) {\n                for ([dr, dc] of neighborhood) {\n                    nr = cell.r+dr;\n                    nc = cell.c+dc;\n                    ncell = this.stringify({r:nr, c:nc})\n                    n = self.numNeighbors.get(ncell)\n                    if ((n==1)&(!self.livingSet.has(ncell))) {\n                        self.numNeighbors.delete(ncell)\n                    } else {\n                        self.numNeighbors.set(ncell, n-1)\n                    }\n                }\n            }\n        }\n    }\n\n    //get lists of cells that are born or die after a single step\n    this.step = function() {\n        let births = [];\n        let deaths = [];\n        for (let [cell, num] of self.numNeighbors.entries()) {\n            if (self.livingSet.has(cell)) {\n                if ((num<2)|(num>3)) {deaths.push(this.parse(cell))}\n            } else {\n                if (num==3) {births.push(this.parse(cell))}\n            }\n        }\n        return [births, deaths]\n    }\n}\n\nexport const game = new Game();\n","<script>\n    import { onMount } from 'svelte';\n    import { game } from './game_logic.js'\n\n    const backgroundColor = 'black'\n    const foregroundColor = '#2bb'\n    const gridColor = '#555'\n    let canvasWidth, canvasHeight;\n\n    let cellSize = 25;\n    let centerX = 0.5;\n    let centerY = 0.5;\n\n    let canvas, context;\n    let stepTime = 0;\n    let drawTime = 0;\n\n    let timerId;\n    let speed = 10;\n    let running = false;\n    let drawing = false;\n    let drawAlive = true;\n    let helpVisible = false;\n\n    let mouseX, mouseY;\n    let numCells=0;\n\n    function clearCanvas() {\n        context.clearRect(0,0,canvas.width, canvas.height)\n        context.fillStyle = backgroundColor\n        context.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    function drawGridLines() {\n        if (cellSize>=10) {\n            const dx = cellSize*(centerX-Math.floor(centerX))\n            const centerLeft = canvas.width/2 - dx\n            const firstLeft = centerLeft - cellSize*Math.floor(centerLeft/cellSize)\n\n            const dy = cellSize*(centerY-Math.floor(centerY))\n            const centerTop = canvas.height/2 - dy\n            const firstTop = centerTop - cellSize*Math.floor(centerTop/cellSize)\n\n            context.strokeStyle = gridColor\n            context.beginPath();\n            let h;\n            for (var i=0; i<Math.ceil(canvas.height/cellSize); i++) {\n                h = Math.floor(firstTop+i*cellSize)+0.5;\n                context.moveTo(0.0, h);\n                context.lineTo(canvas.width, h);\n            }\n            for (var i=0; i<Math.ceil(canvas.width/cellSize); i++) {\n                h = Math.floor(firstLeft+i*cellSize)+0.5;\n                context.moveTo(h, 0.0);\n                context.lineTo(h, canvas.height);\n            }\n            context.stroke();\n            context.closePath();\n        }\n    }\n\n    function drawCells() {\n        let cell\n        for (let cellString of game.livingSet) {\n            cell = game.parse(cellString);\n            fillCell(cell, foregroundColor)\n        }\n    }\n\n    function drawGrid(cellSize) {\n        clearCanvas()\n        drawGridLines()\n        drawCells()\n    }\n\n    function zoom(event) {\n        event.preventDefault();\n        const zoomOut = event.deltaY > 0\n        // change cellSize 5% for every deltaY unit\n        let zoomDelta = Math.floor(Math.abs(event.deltaY)*5*cellSize/100)\n        // If that change is too small then use 1\n        zoomDelta = Math.max(zoomDelta, 1);\n        const newCellSize = Math.min(Math.max(1, cellSize + (zoomOut ? -1 : 1)*zoomDelta), 200);\n        let [pixelsX, pixelsY] = getPixelsFromMouseEvent(event)\n        pixelsX -= canvas.width/2\n        pixelsY -= canvas.height/2\n        const relX = centerX + pixelsX/cellSize;\n        const relY = centerY + pixelsY/cellSize;\n        centerX = (relX - pixelsX/newCellSize);\n        centerY = (relY - pixelsY/newCellSize);\n        centerX = Math.round(2*centerX)/2;\n        centerY = Math.round(2*centerY)/2;\n        cellSize = newCellSize;\n    }\n\n    let directions = new Set();\n    function onKeyDown(event) {\n        if ((event.keyCode===87)|(event.keyCode===38)) { // w or ArrowUp\n            directions.add('up');\n        } else if ((event.keyCode===83)|(event.keyCode===40)) { //s or ArrowDown\n            directions.add('down');\n        } else if ((event.keyCode===65)|(event.keyCode===37)) { // a or ArrowLeft\n            directions.add('left');\n        } else if ((event.keyCode===68)|(event.keyCode===39)) { //d or ArrowRight\n            directions.add('right');\n        }\n        const delta = 20/cellSize\n        const deltaX = (directions.has('right') ? delta : 0) - (directions.has('left') ? delta : 0)\n        const deltaY = (directions.has('down') ? delta : 0) - (directions.has('up') ? delta : 0)\n        if ((deltaX!==0)|(deltaY!==0)) {\n            if (drawing) {\n                const cells = getCellsBetween(mouseX, mouseY, mouseX+deltaX, mouseY+deltaY)\n                if (cells.length > 0) {\n                    if (drawAlive) {\n                        updateGrid(cells, [])\n                    } else {\n                        updateGrid([], cells)\n                    }\n                }\n                mouseX += deltaX\n                mouseY += deltaY\n            }\n            centerX += deltaX\n            centerY += deltaY\n            drawGrid();\n        }\n    }\n\n    function onKeyUp(event) {\n        if ((event.keyCode===87)|(event.keyCode===38)) { // w or ArrowUp\n            directions.delete('up');\n        } else if ((event.keyCode===83)|(event.keyCode===40)) { //s or ArrowDown\n            directions.delete('down');\n        } else if ((event.keyCode===65)|(event.keyCode===37)) { // a or ArrowLeft\n            directions.delete('left');\n        } else if ((event.keyCode===68)|(event.keyCode===39)) { //d or ArrowRight\n            directions.delete('right');\n        }\n    }\n\n    function coordToCell(cx, cy) {\n        return {\n            r: Math.floor(cy),\n            c: Math.floor(cx),\n        }\n    }\n    function getPixelsFromMouseEvent(event) {\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        return [x, y]\n    }\n\n\n    function getCoordFromMouseEvent(event) {\n        const [x, y] = getPixelsFromMouseEvent(event)\n        return pixelsToCoord(x, y)\n    }\n\n    function pixelsToCoord(x, y) {\n        const coord = [\n            centerX + (x-1-canvas.width/2 )/cellSize,\n            centerY + (y-1-canvas.height/2)/cellSize,\n        ]\n        return coord\n    }\n\n    function pixelsToCell(x, y) {\n        const [cx, cy] = pixelsToCoord(x, y);\n        return coordToCell(cx, cy)\n    }\n\n    function cellToTopLeftPixels(cell) {\n        const pixels = {\n            x: Math.floor(canvas.width/2  + 1 + (cell.c - centerX)*cellSize),\n            y: Math.floor(canvas.height/2 + 1 + (cell.r - centerY)*cellSize),\n        }\n        return pixels\n    }\n\n    function integersBetween(z1, z2) {\n        const result = []\n        if (z2 > z1) {\n            for (let i=Math.ceil(z1); i<z2; i++) {\n                result.push(i)\n            }\n        } else {\n            for (let i=Math.floor(z1); i>z2; i--) {\n                result.push(i)\n            }\n        }\n        return result\n    }\n\n    function getCellsBetween(x1, y1, x2, y2) {\n        const lx = x2 - x1;\n        const ly = y2 - y1;\n        let innerX, innerY\n        let cells = []\n        // look for points where the line intersects cell boundaries\n        // not guarding against duplicate cells here\n        for (innerX of integersBetween(x1, x2)) {\n            innerY = y1 + ly * (innerX - x1) / lx\n            cells.push(coordToCell(innerX-1, innerY))\n            cells.push(coordToCell(innerX, innerY))\n        }\n        for (innerY of integersBetween(y1, y2)) {\n            innerX = x1 + lx * (innerY - y1) / ly\n            cells.push(coordToCell(innerX, innerY-1))\n            cells.push(coordToCell(innerX, innerY))\n        }\n        return cells\n    }\n\n\n    function handleMouseDown(event) {\n        const [cx, cy] = getCoordFromMouseEvent(event)\n        const cell = coordToCell(cx, cy)\n        drawAlive = !(game.isCellAlive(cell))\n        if (drawAlive) {\n            updateGrid([cell], [])\n        } else {\n            updateGrid([], [cell])\n        }\n        drawing = true\n        mouseX = cx\n        mouseY = cy\n    }\n\n    function handleMouseMove(event) {\n        if (drawing) {\n            const [cx, cy] = getCoordFromMouseEvent(event)\n            const cells = getCellsBetween(mouseX, mouseY, cx, cy)\n            if (cells.length > 0) {\n                if (drawAlive) {\n                    updateGrid(cells, [])\n                } else {\n                    updateGrid([], cells)\n                }\n            }\n            mouseX = cx\n            mouseY = cy\n        }\n    }\n\n    function handleMouseUp(event) {\n        const [cx, cy] = getCoordFromMouseEvent(event)\n        const cell = coordToCell(cx, cy)\n        if (drawAlive) {\n            updateGrid([cell], [])\n        } else {\n            updateGrid([], [cell])\n        }\n        drawing = false\n    }\n\n    // touch handling\n    let ongoingTouches = []\n    let lastTouchTime = 0\n\n    function handleTouchStart(event) {\n        event.preventDefault();\n        for (let touch of event.changedTouches) {\n            ongoingTouches.push({\n                id: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n            });\n        }\n        lastTouchTime = performance.now();\n        if (ongoingTouches.length==1) {\n            const [cx, cy] = getCoordFromMouseEvent(ongoingTouches[0])\n            const cell = coordToCell(cx, cy)\n            drawAlive = !(game.isCellAlive(cell))\n            drawing = true;\n        } else if (ongoingTouches.length>1) {\n            drawing = false;\n        }\n    }\n    function handleTouchMove(event) {\n        event.preventDefault();\n        let time = performance.now();\n        if ((time - lastTouchTime >= 50)\n                &&(ongoingTouches.length == 1)\n                &&(drawing)) {\n            // one finger moves - draw\n            const newTouch = event.changedTouches[0]\n            const [cx, cy] = getCoordFromMouseEvent(ongoingTouches[0])\n            const [newcx, newcy] = getCoordFromMouseEvent(newTouch)\n            const cells = getCellsBetween(newcx, newcy, cx, cy)\n            if (cells.length > 0) {\n                if (drawAlive) {\n                    updateGrid(cells, [])\n                } else {\n                    updateGrid([], cells)\n                }\n            }\n            ongoingTouches = [{\n                id: newTouch.identifier,\n                clientX: newTouch.clientX,\n                clientY: newTouch.clientY,\n            }];\n            lastTouchTime = time;\n        } else if ((time - lastTouchTime >= 200)\n                    &&(ongoingTouches.length==2)) {\n            // two fingers move - pan or zoom\n            const ids = ongoingTouches.map(item => item.id);\n            let newTouches = [...ongoingTouches]\n            let index\n            for (let touch of event.changedTouches) {\n                index = ids.indexOf(touch.identifier)\n                newTouches[index] = {\n                    id: touch.identifier,\n                    clientX: touch.clientX,\n                    clientY: touch.clientY,\n                }\n            }\n            // how much did distance in pixels change between fingers\n            // scale cell size that much\n            const oldDistance = Math.sqrt(\n                (ongoingTouches[0].clientX-ongoingTouches[1].clientX)**2\n                +(ongoingTouches[0].clientY-ongoingTouches[1].clientY)**2)\n            const newDistance = Math.sqrt(\n                (newTouches[0].clientX-newTouches[1].clientX)**2\n                +(newTouches[0].clientY-newTouches[1].clientY)**2)\n            const newCellSize = Math.max(1, Math.round(newDistance*cellSize/oldDistance))\n            // how much did fingers move from their previous position?\n            // move the screen in that average direction\n            const [cx0, cy0] = getCoordFromMouseEvent(ongoingTouches[0])\n            const [cx1, cy1] = getCoordFromMouseEvent(ongoingTouches[1])\n            cellSize = newCellSize\n            const [newcx0, newcy0] = getCoordFromMouseEvent(newTouches[0])\n            const [newcx1, newcy1] = getCoordFromMouseEvent(newTouches[1])\n            const deltaX = 0.5*(newcx0-cx0+newcx1-cx1)\n            const deltaY = 0.5*(newcy0-cy0+newcy1-cy1)\n            centerX = centerX-deltaX;\n            centerY = centerY-deltaY;\n            drawGrid()\n            ongoingTouches = newTouches\n            }\n    }\n\n    function handleTouchEnd(event) {\n        event.preventDefault();\n        if (drawing && (ongoingTouches.length===1)) {\n            const [cx, cy] = getCoordFromMouseEvent(event.changedTouches[0])\n            const cell = coordToCell(cx, cy)\n            if (drawAlive) {\n                updateGrid([cell], [])\n            } else {\n                updateGrid([], [cell])\n            }\n            drawing = false;\n        }\n        for (let touch of event.changedTouches) {\n            ongoingTouches = ongoingTouches.filter(item => item.id!==touch.identifier)\n        }\n        lastTouchTime = performance.now();\n    }\n\n    function fillCell(cell, color) {\n        context.fillStyle = color;\n        const pixels = cellToTopLeftPixels(cell)\n        context.fillRect(\n            pixels.x, pixels.y,\n            cellSize-(cellSize<=2 ? 0.0 : 1.0),\n            cellSize-(cellSize<=2 ? 0.0 : 1.0)\n        );\n    }\n\n    function updateGrid(births, deaths) {\n        let t0 = performance.now()\n        if ((births.length==0)&(deaths.length===0)) {stop()}\n        game.update(births, deaths);\n        for (let cell of births) {\n            fillCell(cell, foregroundColor)\n        }\n        for (let cell of deaths) {\n            fillCell(cell, backgroundColor)\n        }\n        drawTime=Math.round(performance.now()-t0);\n        numCells = game.livingSet.size;\n    }\n\n    function step() {\n        let t0 = performance.now()\n        let births, deaths\n        [births, deaths] = game.step();\n        stepTime = Math.round(performance.now()-t0);\n        updateGrid(births, deaths);\n    }\n\n    function clear() {\n        game.clear()\n        drawGrid();\n        numCells = game.livingSet.size;\n    }\n\n    function run() {\n        if (!running) {\n            timerId = setInterval(() => step(), 1000/speed);\n            running = true;\n        }\n    }\n\n    function stop() {\n        if (running) {\n            clearInterval(timerId)\n            running = false;\n        }\n    }\n\n    function set_speed(speed) {\n        if (running) {\n            stop()\n            run()\n        }\n    }\n\n    async function onResize() {\n        canvas.width=10\n        canvas.height=10\n        const rect = canvas.parentNode.getBoundingClientRect();\n        canvas.width = rect.width;\n        canvas.height = rect.height;\n        drawGrid(cellSize)\n    }\n        onMount(async () => {\n            context = canvas.getContext(\"2d\");\n            // There's some resizing going on in the beginning\n            // If I call onResize here it works like half the time\n            // The other half - size of canvas stays 150*300\n            // Or window width*10\n            // This timeout is an ugly hack (but works?...)\n            setTimeout(onResize,42);\n            // onResize()\n        });\n\n    $: if (canvas) {\n        drawGrid(cellSize);\n    }\n    $: set_speed(speed);\n</script>\n\n<svelte:window on:keydown={onKeyDown} on:keyup={onKeyUp} on:resize={onResize}/>\n<div class=\"controls\">\n    <div class=\"row\">\n        <button\n            type=\"button\"\n            name=\"help\"\n            title=\"Show help\"\n            on:click={()=>helpVisible=!helpVisible}\n            >?</button>\n        <button on:click={clear} title=\"Clear all cells from grid\">Clear</button>\n        <button on:click={step} disabled={running}>\n            Step\n        </button>\n        <button on:click={running ? stop : run}>\n            {running ? 'Stop' : 'Run'}\n        </button>\n    </div>\n    <div class=\"row\">\n        <label for=\"speed\">Speed</label>\n        <input id=\"speed\" type=\"range\" min=\"5\" max=\"500\" step=\"1\" bind:value={speed} />\n    </div>\n    <div class=\"row\">\n        <div>\n            cells:<br/>{numCells}\n        </div>\n        <div>\n            step:<br/>{stepTime} ms\n        </div>\n        <div>\n            draw:<br/>{drawTime} ms\n        </div>\n    </div>\n    {#if helpVisible}\n    <ul>\n        <li><a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Conway's Game of Life</a>.</li>\n        <li>Click or touch and drag to draw shapes</li>\n        <li>Press Run to see them evolve</li>\n        <li>Use W,A,S,D or arrows to move around, mouse wheel to zoom</li>\n        <li>Or touch with two fingers to pan and zoom</li>\n    </ul>\n    {/if}\n</div>\n<canvas id=\"gridCanvas\"\n                class=\"gridCanvas\"\n                bind:this={canvas}\n                on:mouseup={handleMouseUp}\n                on:mousedown={handleMouseDown}\n                on:mousemove={handleMouseMove}\n                on:wheel={zoom}\n                on:touchstart={handleTouchStart}\n                on:touchmove={handleTouchMove}\n                on:touchend={handleTouchEnd}\n                on:touchcancel={handleTouchEnd}\n                ></canvas>\n\n<style>\n    div.controls {\n        display:flex;\n        flex-direction:column;\n        position:absolute;\n        top: 5px;\n        left: 5px;\n        max-width:250px;\n        padding: 0 5px;\n        background:rgba(180,180,180,0.8);\n        border-radius: 5px;\n    }\n   canvas {\n      display: block;\n   }\n    button {\n        width: 3.5em;\n        border-radius:5px;\n        background:#bbb;\n    }\n    div.row {\n        display:flex;\n        flex-direction:row;\n        justify-content: space-between;\n        align-items:center;\n        padding: 5px 0;\n    }\n    div.row>div {\n        flex: 1 1 0px;\n    }\n</style>\n","import App from './App.svelte';\n\nvar app = new App({\n    target: document.body\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","set_input_value","input","current_component","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","i","length","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","on_destroy","context","Map","callbacks","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","c","intro","block","delete","local","m","new_on_destroy","map","filter","mount_component","game","self","this","livingSet","numNeighbors","neighborhood","stringify","cell","r","parse","cellString","split","parseInt","isCellAlive","births","deaths","dr","dc","nr","nc","n","ncell","deleted","set","get","step","num","entries","coordToCell","cx","cy","Math","floor","integersBetween","z1","z2","result","ceil","getCellsBetween","x1","y1","x2","y2","lx","ly","innerX","innerY","cells","canvas","timerId","mouseX","mouseY","cellSize","centerX","centerY","stepTime","drawTime","speed","running","drawing","drawAlive","helpVisible","numCells","clearCanvas","clearRect","width","height","fillStyle","fillRect","drawGridLines","dx","centerLeft","firstLeft","dy","centerTop","firstTop","h","strokeStyle","beginPath","moveTo","lineTo","stroke","closePath","drawCells","fillCell","drawGrid","directions","getPixelsFromMouseEvent","rect","getBoundingClientRect","clientX","left","clientY","top","getCoordFromMouseEvent","x","y","pixelsToCoord","cellToTopLeftPixels","ongoingTouches","lastTouchTime","color","pixels","updateGrid","t0","performance","now","stop","round","size","setInterval","clearInterval","set_speed","onResize","getContext","setTimeout","preventDefault","zoomOut","deltaY","zoomDelta","abs","max","newCellSize","min","pixelsX","pixelsY","keyCode","delta","deltaX","touch","changedTouches","id","identifier","time","newTouch","newcx","newcy","ids","item","index","newTouches","indexOf","oldDistance","sqrt","newDistance","cx0","cy0","cx1","cy1","newcx0","newcy0","newcx1","newcy1","canvasWidth","canvasHeight","undefined","[object Object]","detaching","d","destroy_component","$destroy","type","splice","body"],"mappings":"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"}